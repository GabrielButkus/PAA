import java.io.IOException;


public class Main {

	public static void main(String[] args) throws IOException{
		// USANDO BUBBLESORT 
		// (PARA VETOR DE 10000)
		int tamanho = 10000;
		int[] vetor = new int[tamanho];
		for(int i=0; i<vetor.length; i++) {
			vetor[i] = (int) (Math.random()*tamanho);
		}
		System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BUBBLESORT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        long tempoInicial = System.currentTimeMillis();
        bubbleSort(vetor);
        long tempoFinal = System.currentTimeMillis();
        System.out.println("BubbleSort, tamanho: " + vetor.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
        
        //PARA VETOR DE 100000
        tamanho = 100000;
		int[] vetor2 = new int[tamanho];
		for(int i=0; i<vetor2.length; i++) {
			vetor2[i] = (int) (Math.random()*tamanho);
		}        
		tempoInicial = System.currentTimeMillis();       
        bubbleSort(vetor2);     
        tempoFinal = System.currentTimeMillis(); 
        System.out.println("BubbleSort, tamanho: " + vetor2.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
        
        //PARA VETOR DE 1000000
        tamanho = 100000;
		int[] vetor3 = new int[tamanho];
		for(int i=0; i<vetor3.length; i++) {
			vetor3[i] = (int) (Math.random()*tamanho);
		}             
		tempoInicial = System.currentTimeMillis();    
        bubbleSort(vetor3);
        tempoFinal = System.currentTimeMillis();
        System.out.println("BubbleSort, tamanho: " + vetor3.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
        System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        
        
        //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        
        //USANDO INSERTIONSORT
        //PARA VETOR DE 10000
		System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx INSERTIONSORT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
		for(int i=0; i<vetor.length; i++) {
			vetor[i] = (int) (Math.random()*tamanho);
		}        
		tempoInicial = System.currentTimeMillis();
        insertionSort(vetor);
        tempoFinal = System.currentTimeMillis();
        System.out.println("InsertionSort, tamanho: " + vetor.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
                
        //PARA VETOR DE 100000
        for(int i=0; i<vetor2.length; i++) {
			vetor2[i] = (int) (Math.random()*tamanho);
		}        
        tempoInicial = System.currentTimeMillis();
        insertionSort(vetor2);
        tempoFinal = System.currentTimeMillis();
        System.out.println("InsertionSort, tamanho: " + vetor2.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
                
        //PARA VETOR DE 1000000
        for(int i=0; i<vetor3.length; i++) {
			vetor3[i] = (int) (Math.random()*tamanho);
		}
        tempoInicial = System.currentTimeMillis();
        insertionSort(vetor3);
        tempoFinal = System.currentTimeMillis();
        System.out.println("InsertionSort, tamanho: " + vetor3.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
        System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

        //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

        //USANDO QUICKSORT
        //PARA VETOR DE 10000
		System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx QUICKSORT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
		for(int i=0; i<vetor.length; i++) {
			vetor[i] = (int) (Math.random()*tamanho);
		}
		tempoInicial = System.currentTimeMillis();
        insertionSort(vetor);
        tempoFinal = System.currentTimeMillis();
        System.out.println("QuickSort, tamanho: " + vetor.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
                
        //PARA VETOR DE 100000
        for(int i=0; i<vetor2.length; i++) {
			vetor2[i] = (int) (Math.random()*tamanho);
		}
        tempoInicial = System.currentTimeMillis();
        insertionSort(vetor2);
        tempoFinal = System.currentTimeMillis();
        System.out.println("QuickSort, tamanho: " + vetor2.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
                
        //PARA VETOR DE 1000000
        for(int i=0; i<vetor3.length; i++) {
			vetor3[i] = (int) (Math.random()*tamanho);
		}
        tempoInicial = System.currentTimeMillis();
        insertionSort(vetor3);
        tempoFinal = System.currentTimeMillis();
        System.out.println("QuickSort, tamanho: " + vetor3.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
        System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        
        //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

        //USANDO SELECTIONSORT
        //PARA VETOR DE 10000
		System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx SELECTIONSORT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
		for(int i=0; i<vetor.length; i++) {
			vetor[i] = (int) (Math.random()*tamanho);
		}
		tempoInicial = System.currentTimeMillis();
        insertionSort(vetor);
        tempoFinal = System.currentTimeMillis();
        System.out.println("SelectionSort, tamanho: " + vetor.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
                
        //PARA VETOR DE 100000
        for(int i=0; i<vetor2.length; i++) {
			vetor2[i] = (int) (Math.random()*tamanho);
		}
        tempoInicial = System.currentTimeMillis();
        insertionSort(vetor2);
        tempoFinal = System.currentTimeMillis();
        System.out.println("SelectionSort, tamanho: " + vetor2.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
                
        //PARA VETOR DE 1000000
        for(int i=0; i<vetor3.length; i++) {
			vetor3[i] = (int) (Math.random()*tamanho);
		}
        tempoInicial = System.currentTimeMillis();
        insertionSort(vetor3);
        tempoFinal = System.currentTimeMillis();
        System.out.println("SelectionSort, tamanho: " + vetor3.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
        System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

      //USANDO MERGESORT
        //PARA VETOR DE 10000
		System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx MERGESORT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
		for(int i=0; i<vetor.length; i++) {
			vetor[i] = (int) (Math.random()*tamanho);
		}
		tempoInicial = System.currentTimeMillis();
        mergeSort(vetor, 500);
        tempoFinal = System.currentTimeMillis();
        System.out.println("MergeSort, tamanho: " + vetor.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
                
        //PARA VETOR DE 100000
        for(int i=0; i<vetor2.length; i++) {
			vetor2[i] = (int) (Math.random()*tamanho);
		}
        tempoInicial = System.currentTimeMillis();
        mergeSort(vetor2, 5000);
        tempoFinal = System.currentTimeMillis();
        System.out.println("MergeSort, tamanho: " + vetor2.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
                
        //PARA VETOR DE 1000000
        for(int i=0; i<vetor3.length; i++) {
			vetor3[i] = (int) (Math.random()*tamanho);
		}
        tempoInicial = System.currentTimeMillis();
        mergeSort(vetor3, 50000);
        tempoFinal = System.currentTimeMillis();
        System.out.println("MergeSort, tamanho: " + vetor3.length +  "\t");
        System.out.print("Executado em = " + (tempoFinal - tempoInicial) + " ms\n");
        System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        
	}
	
	public static void createVector(int[] vetor, int tamanho) {
		vetor = new int[tamanho];
		
		for(int i=0; i<vetor.length; i++) {
			vetor[i] = (int) (Math.random()*tamanho);
		}
	}
	
	public static void mergeSort(int[] a, int n) {
	    if (n < 2) {
	        return;
	    }
	    int mid = n / 2;
	    int[] l = new int[mid];
	    int[] r = new int[n - mid];
	 
	    for (int i = 0; i < mid; i++) {
	        l[i] = a[i];
	    }
	    for (int i = mid; i < n; i++) {
	        r[i - mid] = a[i];
	    }
	    mergeSort(l, mid);
	    mergeSort(r, n - mid);
	 
	    merge(a, l, r, mid, n - mid);
	}
	
	public static void merge(
			  int[] a, int[] l, int[] r, int left, int right) {
			  
			    int i = 0, j = 0, k = 0;
			    while (i < left && j < right) {
			        if (l[i] <= r[j]) {
			            a[k++] = l[i++];
			        }
			        else {
			            a[k++] = r[j++];
			        }
			    }
			    while (i < left) {
			        a[k++] = l[i++];
			    }
			    while (j < right) {
			        a[k++] = r[j++];
			    }
			}
	
	public static void insertionSort(int[] vetor) {
	    int j;
	    int key;
	    int i;
	    
	    for (j = 1; j < vetor.length; j++)
	    {
	      key = vetor[j];
	      for (i = j - 1; (i >= 0) && (vetor[i] > key); i--)
	      {
	         vetor[i + 1] = vetor[i];
	       }
	        vetor[i + 1] = key;
	    }
	}
	
	private static void bubbleSort(int[] vetor){
        boolean troca = true;
        int aux;
        while (troca) {
            troca = false;
            for (int i = 0; i < vetor.length - 1; i++) {
                if (vetor[i] > vetor[i + 1]) {
                    aux = vetor[i];
                    vetor[i] = vetor[i + 1];
                    vetor[i + 1] = aux;
                    troca = true;
                }
            }
        }
	}
	
	private static void quickSort(int[] vetor, int inicio, int fim) {
        if (inicio < fim) {
               int posicaoPivo = separar(vetor, inicio, fim);
               quickSort(vetor, inicio, posicaoPivo - 1);
               quickSort(vetor, posicaoPivo + 1, fim);
        }
  }

  private static int separar(int[] vetor, int inicio, int fim) {
        int pivo = vetor[inicio];
        int i = inicio + 1, f = fim;
        while (i <= f) {
               if (vetor[i] <= pivo)
                      i++;
               else if (pivo < vetor[f])
                      f--;
               else {
                      int troca = vetor[i];
                      vetor[i] = vetor[f];
                      vetor[f] = troca;
                      i++;
                      f--;
               }
        }
        vetor[inicio] = vetor[f];
        vetor[f] = pivo;
        return f;
  }
  
  public static void selectionSort(int[] array) {
	  for (int fixo = 0; fixo < array.length - 1; fixo++) {
	    int menor = fixo;
	   
	    for (int i = menor + 1; i < array.length; i++) {
	       if (array[i] < array[menor]) {
	          menor = i;
	       }
	    }
	    if (menor != fixo) {
	      int t = array[fixo];
	      array[fixo] = array[menor];
	      array[menor] = t;
	    }
	  }
	}
  
  

}
